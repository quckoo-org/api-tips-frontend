// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.20.3
// source: test/v1/test.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  OperationStatus,
  operationStatusFromJSON,
  operationStatusToJSON,
  operationStatusToNumber,
} from "../../custom_enums/v1/custom_enums";

export const protobufPackage = "test";

export interface PingPongRequest {
  ping: string;
}

export interface PingPongResponse {
  /** Статус операции */
  status: OperationStatus;
  pong: string;
}

function createBasePingPongRequest(): PingPongRequest {
  return { ping: "" };
}

export const PingPongRequest: MessageFns<PingPongRequest> = {
  encode(message: PingPongRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ping !== "") {
      writer.uint32(10).string(message.ping);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingPongRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingPongRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ping = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PingPongRequest {
    return { ping: isSet(object.ping) ? globalThis.String(object.ping) : "" };
  },

  toJSON(message: PingPongRequest): unknown {
    const obj: any = {};
    if (message.ping !== "") {
      obj.ping = message.ping;
    }
    return obj;
  },

  create(base?: DeepPartial<PingPongRequest>): PingPongRequest {
    return PingPongRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PingPongRequest>): PingPongRequest {
    const message = createBasePingPongRequest();
    message.ping = object.ping ?? "";
    return message;
  },
};

function createBasePingPongResponse(): PingPongResponse {
  return { status: OperationStatus.OPERATION_STATUS_UNSPECIFIED, pong: "" };
}

export const PingPongResponse: MessageFns<PingPongResponse> = {
  encode(message: PingPongResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== OperationStatus.OPERATION_STATUS_UNSPECIFIED) {
      writer.uint32(8).int32(operationStatusToNumber(message.status));
    }
    if (message.pong !== "") {
      writer.uint32(18).string(message.pong);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingPongResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingPongResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.status = operationStatusFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pong = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PingPongResponse {
    return {
      status: isSet(object.status)
        ? operationStatusFromJSON(object.status)
        : OperationStatus.OPERATION_STATUS_UNSPECIFIED,
      pong: isSet(object.pong) ? globalThis.String(object.pong) : "",
    };
  },

  toJSON(message: PingPongResponse): unknown {
    const obj: any = {};
    if (message.status !== OperationStatus.OPERATION_STATUS_UNSPECIFIED) {
      obj.status = operationStatusToJSON(message.status);
    }
    if (message.pong !== "") {
      obj.pong = message.pong;
    }
    return obj;
  },

  create(base?: DeepPartial<PingPongResponse>): PingPongResponse {
    return PingPongResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PingPongResponse>): PingPongResponse {
    const message = createBasePingPongResponse();
    message.status = object.status ?? OperationStatus.OPERATION_STATUS_UNSPECIFIED;
    message.pong = object.pong ?? "";
    return message;
  },
};

export type TestServiceDefinition = typeof TestServiceDefinition;
export const TestServiceDefinition = {
  name: "TestService",
  fullName: "test.TestService",
  methods: {
    pingPong: {
      name: "PingPong",
      requestType: PingPongRequest,
      requestStream: false,
      responseType: PingPongResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface TestServiceImplementation<CallContextExt = {}> {
  pingPong(request: PingPongRequest, context: CallContext & CallContextExt): Promise<DeepPartial<PingPongResponse>>;
}

export interface TestServiceClient<CallOptionsExt = {}> {
  pingPong(request: DeepPartial<PingPongRequest>, options?: CallOptions & CallOptionsExt): Promise<PingPongResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
